private String processCommands(String message, ServerThread client) {
	String response = null;
	try {
	    if (message.indexOf(COMMAND_TRIGGER) > -1) {
		String[] comm = message.split(COMMAND_TRIGGER);
		log.log(Level.INFO, message);
		String part1 = comm[1];
		String[] comm2 = part1.split(" ");
		String command = comm2[0];
		if (command != null) {
		    command = command.toLowerCase();
		}
		String roomName;
		ClientPlayer cp = null;
		switch (command) {
		case CREATE_ROOM:
		    roomName = comm2[1];
		    createRoom(roomName, client);
		    break;
		case JOIN_ROOM:
		    roomName = comm2[1];
		    joinRoom(roomName, client);
		    break;
		case READY:
		    cp = getCP(client);
		    if (cp != null) {
			cp.player.setReady(true);
			readyCheck();
		    }
		    response = "Ready to go!";

		    break;
		case "reset":// TODO for testing purposes, don't forget to delete when done testing
		    resetChairs();
		    resetTickets();
		    break;
		case "start":// TODO for testing purposes, don't forget to delete when done testing
		    readyCheck();
		    break;
		case "mute":
		    // person we extracted
		    String mutedDude = "";
		    sendPrivateMessage(client, new ArrayList<String>(), "You have been muted");
		    break;
		case "unmute":
		    // person we extracted
		    String unmutedDude = "";
		    sendPrivateMessage(client, new ArrayList<String>(), "You have been unmuted");
		    break;
		case "pm":
		    // TODO extract clients from message, save to array with
		    String clientName = "";
		    clientName = clientName.trim().toLowerCase();
		    List<String> clients = new ArrayList<String>();
		    clients.add(clientName);
		    sendPrivateMessage(client, clients, message);
		    response = null;
		    break;
		default:
		    // not a command, let's fix this function from eating messages
		    response = message;
		    break;
		}
	    }
	    else {
		// not a command, let's fix this function from eating messages
		// response = message;
		String alteredMessage = message;

		if (alteredMessage.indexOf("@@") > -1) {
		    String[] s1 = alteredMessage.split("@@");
		    String m = "";
		    // m += s1[0];
		    for (int i = 0; i < s1.length; i++) {
			if (i % 2 == 0) {
			    m += s1[i];
			}
			else {
			    m += "<b>" + s1[i] + "</b>";
			}
			System.out.println(s1[i]);
		    }
		    // m += s1[s1.length - 1];
		    alteredMessage = m;
		}
		response = alteredMessage;
	    }
	}
	catch (Exception e) {
	    e.printStackTrace();
	}
	return response;
    }